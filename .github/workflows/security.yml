name: Security

on:
  schedule:
    - cron: "30 5 * * MON-FRI" # Every weekday at 05:30 UTC
  workflow_dispatch:

jobs:
  trivy-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Scan image
        uses: aquasecurity/trivy-action@9ab158e8597f3b310480b9a69402b419bc03dbd5 # v0.8.0
        with:
          image-ref: 'quay.io/hmpps/prison-to-probation-update:latest'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          format: 'sarif'
          output: 'trivy-results.sarif'
          trivyignores: '.trivyignore'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Get Trivy results
        if: always()
        uses: aquasecurity/trivy-action@9ab158e8597f3b310480b9a69402b419bc03dbd5 # v0.8.0
        with:
          image-ref: 'quay.io/hmpps/prison-to-probation-update:latest'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          format: 'json'
          output: 'results.json'
          trivyignores: '.trivyignore'

      - name: Output Trivy results
        if: always()
        run: cat results.json

      - name: Create GitHub issues
        if: failure()
        run: |
          cat results.json | jq -c '.Results[].Vulnerabilities | select(. != null) | flatten | .[]' | while read -r vulnerability; do
            id=$(echo "$vulnerability" | jq -r '.VulnerabilityID')
            if [[ $(gh issue list --state open --label dependencies --label security --search "$id" | wc -l) -gt 0 ]]; then
              echo 'Issue "$id" already exists'
            else
              gh issue create \
                --title "$id" \
                --body "$(echo $vulnerability | jq -r '.Title + "\n* Package: `" + .PkgName + ":" + .InstalledVersion + "`\n* Location: `" + .PkgPath + "`\n\n>" + .Description + "\n\n" + .PrimaryURL')" \
                --label 'dependencies,security'
            fi
          done
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Check & Close GH Issue
        if: always()
        run: |
          openissues=$(gh issue list --state open --label dependencies --label security | awk '{print $3}')
          scanresults=$(cat results.json | jq -r -c '.Results[].Vulnerabilities | select(. != null) | flatten | .[].VulnerabilityID')
          issuestoclose=$(comm -3 <(echo $openissues | sort) <(echo $scanresults | sort)) #print lines only present in first file
          for cve in $issuestoclose; do
            echo "$cve is already resolved, removing matching issue..."
            issuenumber=$(gh issue list --state open --label dependencies --label security --search "$cve" | awk '{print $1}')
            echo $issuenumber | xargs -n1 gh issue close
          done

        env:
          GITHUB_TOKEN: ${{ github.token }}
package uk.gov.justice.digital.hmpps.prisontoprobation.entity

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTypeConverted
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTypeConverter
import uk.gov.justice.digital.hmpps.prisontoprobation.services.SynchroniseStatus
import java.time.LocalDate
import java.time.LocalDateTime
import java.time.LocalTime
import java.time.ZoneOffset

const val MAX_REPORTING_PERIOD_DAYS: Long = 30

@DynamoDBTable(tableName = "Message") // table name will be dynamically amended via config
data class Message(
  @DynamoDBHashKey
  @DynamoDBAutoGeneratedKey
  var id: String? = null,
  @DynamoDBAttribute
  var bookingId: Long = 0L,
  @DynamoDBAttribute
  var retryCount: Int = 1,
  @DynamoDBTypeConverted(converter = LocalDateTimeConverter::class)
  var createdDate: LocalDateTime = LocalDateTime.now(),
  @DynamoDBAttribute
  var deleteBy: Long = LocalDateTime.now().plusDays(MAX_REPORTING_PERIOD_DAYS).toEpochSecond(ZoneOffset.UTC),
  @DynamoDBAttribute
  var eventType: String = "",
  @DynamoDBAttribute
  var message: String = "",
  @DynamoDBTypeConverted(converter = NullableLocalDateTimeConverter::class)
  var processedDate: LocalDateTime? = null,
  @DynamoDBAttribute
  var reportable: Boolean = false,
  @DynamoDBAttribute
  var offenderNo: String? = null,
  @DynamoDBAttribute
  var bookingNo: String? = null,
  @DynamoDBAttribute
  var locationId: String? = null,
  @DynamoDBAttribute
  var locationDescription: String? = null,
  @DynamoDBAttribute
  var recall: Boolean? = null,
  @DynamoDBAttribute
  var legalStatus: String? = null,
  @DynamoDBAttribute
  var status: String? = null,
  @DynamoDBAttribute
  var matchingCrns: String? = null,
) {
  fun retry(retryUntil: LocalDate? = null, status: SynchroniseStatus): Message {
    retryCount += 1
    retryUntil?.also {
      this.deleteBy = retryUntil.toEpochSecond(LocalTime.now(), ZoneOffset.UTC)
    }
    this.status = status.state.name
    status.matchingCrns?.also {
      this.matchingCrns = it
    }
    return this
  }

  fun markAsProcessed(): Message {
    this.processedDate = LocalDateTime.now()
    this.deleteBy = LocalDateTime.now().plusDays(MAX_REPORTING_PERIOD_DAYS).toEpochSecond(ZoneOffset.UTC)
    return this
  }
}

class LocalDateTimeConverter : DynamoDBTypeConverter<String, LocalDateTime> {
  override fun convert(time: LocalDateTime): String {
    return time.toString()
  }

  override fun unconvert(stringValue: String): LocalDateTime {
    return LocalDateTime.parse(stringValue)
  }
}

class NullableLocalDateTimeConverter : DynamoDBTypeConverter<String, LocalDateTime?> {
  override fun convert(time: LocalDateTime?): String? {
    return time?.toString()
  }

  override fun unconvert(stringValue: String?): LocalDateTime? {
    return stringValue?.let { LocalDateTime.parse(it) }
  }
}
